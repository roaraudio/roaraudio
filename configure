#!/bin/sh

# check for bash...

if [ "$(echo -n)" = '-n' ]
then
 SHELL=$(which bash sh 2> /dev/null | grep ^/ | head -n 1)
 exec $SHELL $0 "$@"
fi


#set -x

TF_C=testit.c
TF_E=./testit
LDPATH=''
INCPATH=''

SYSNAME='unknown'
SHARED='-shared'
SHARED_CF=''
PKG_CONFIG=false
RUNTIME_DETECT=false

PREFIX='/usr/local'
PREFIX_BIN=''
PREFIX_LIB=''
PREFIX_INC=''
PREFIX_MAN=''

CDROM="none"
OSS_DEV="none"
PROC_NET_DECNET="/proc/net/decnet"

DEFAULT_GRP=''

AO_INST_DIR=''
XMMS_INST_DIR=''

LIBAO=true
XMMS=true

DEFAULT_RATE=''
DEFAULT_CHANNELS=''
DEFAULT_BITS=''

ALAW=true
MULAW=true
ALAW_RW=true
MULAW_RW=true

PROXY=true

MINIMAL=false

TARGET_WIN32=false

EXEC_HELPER=''

echo -n "checking for C compiler... "
if [ "$CC" != '' ]
then
 echo $CC
else
 CC=$(which gcc cc 2> /dev/null | grep ^/ | head -n 1)
 if [ "$CC" = '' ]
 then
  echo 'none'
  exit 1;
 fi
 echo $CC
fi

echo -n "checking for pkg-config... "
PKG_CONFIG=$(which pkg-config false 2> /dev/null | grep ^/ | head -n 1)
if $PKG_CONFIG --help > /dev/null 2> /dev/null
then
 echo $PKG_CONFIG
else
 echo no
fi

#Makefile.conf not yet open, write it later

echo -n "checking for sysname... "
SYSNAME=$(uname -s)
echo "$SYSNAME"

while [ "$1" != '' ]
do
 case "$1" in
  '--help')
   echo '--help                      - This Help'
   echo
   echo '--ldpath DIR                - Add DIR to (compile time) search list for libs'
   echo '--incpath DIR               - Add DIR to search list for headers'
   echo '--addpath DIR               - Add DIR/lib to lib, DIR/include to header search list'
   echo
   echo '--cdrom DEV                 - Set default CDRum device'
   echo '--proc-net-decnet FILE      - Set DECnet file for DECnet support auto detecting'
   echo '                              (ignore this on non-Linux)'
   echo
   echo '--no-LIB                    - disable library LIB'
   echo '--runtime-detect            - do as much as posible auto detecting on runtime (for distributors)'
   echo
   echo '--ao-install-dir DIR        - Set install dir for libao plugin'
   echo '--xmms-install-dir DIR      - Set install dir for XMMS plugin'
   echo
   echo '--prefix DIR                - Set general prefix (default: '"$PREFIX"')'
   echo '--prefix-bin DIR            - Set prefix for binarys (default: $PREFIX/bin)'
   echo '--prefix-lib DIR            - Set prefix for librarys (default: $PREFIX/libs)'
   echo '--prefix-inc DIR            - Set prefix for include files (default: $PREFIX/include)'
   echo '--prefix-man DIR            - Set prefix for manpages (default: $PREFIX/man)'
   echo
   echo '--default-rate RATE         - Set default sample rate for roard and roarclients'
   echo '--default-channels CHANNELS - Set default number of channels for roard and roarclients'
   echo '--default-bits BITS         - Set default number of bits per sample for roard and roarclients'
   echo
   echo '--without-alaw              - Disable support of A-Law codec (de- and encoding)'
   echo '--without-alaw-rw           - Disable support for writing A-Law (saves 8KB)'
   echo '--without-mulaw             - Disable support of mu-Law codec (de- and encoding)'
   echo '--without-mulaw-rw          - Disable support for writing mu-Law (saves 16KB)'
   echo '--without-proxy             - Disable support for proxys'
   echo
   echo '--without-libao             - Disable build of libao plugin'
   echo '--without-xmms              - Disable build of XMMS plugin'
   echo
   echo '--minimal                   - Disable all optional components'
   echo '--target-win32              - Disable everything useful'
   echo '--exec-helper HELPER        - Exec all test programms using this command (HELPER $cmd $args)'
   echo '                              use '\''--exec-helper wine'\'' when building win32 binarys'
   exit 0;
  ;;
  '--ldpath')
   LDPATH="$LDPATH -L$2"
   shift;
  ;;
  '--incpath')
   INCPATH="$INCPATH -I$2"
   shift;
  ;;
  '--addpath')
   LDPATH="$LDPATH -L$2/lib/"
   INCPATH="$INCPATH -I$2/include/"
   shift;
  ;;
  '--cc')
   CC="$2"
   shift;
  ;;
  '--cdrom')
   CDROM="$2"
   shift;
  ;;
  '--oss-dev')
   OSS_DEV="$2"
   shift;
  ;;
  '--audio-group')
   DEFAULT_GRP="$2"
   shift;
  ;;
  '--no-'*)
   lib=$(echo "$1" | sed 's/^--no-//')
   eval no_lib_$lib=true
  ;;
  '--runtime-detect')
   RUNTIME_DETECT=true
  ;;
  '--ao-install-dir')
   AO_INST_DIR="$2"
   shift;
  ;;
  '--xmms-install-dir')
   XMMS_INST_DIR="$2"
   shift;
  ;;
  '--default-rate')
   DEFAULT_RATE="$2"
   shift;
  ;;
  '--default-channels')
   DEFAULT_CHANNELS="$2"
   shift;
  ;;
  '--default-bits')
   DEFAULT_BITS="$2"
   shift;
  ;;
  '--without-alaw')
   ALAW=false
   ALAW_RW=false
  ;;
  '--without-alaw-rw')
   ALAW_RW=false
  ;;
  '--without-mulaw')
   MULAW=false
   MULAW_RW=false
  ;;
  '--without-mulaw-rw')
   MULAW_RW=false
  ;;
  '--without-proxy')
   PROXY=false
  ;;
  '--without-libao')
   LIBAO=false
   no_lib_ao=true
  ;;
  '--without-xmms')
   XMMS=false
  ;;
  '--minimal')
   MINIMAL=true
   XMMS=false
   LIBAO=false
   PROXY=false
   MULAW=false
   MULAW_RW=false
   ALAW=false
   ALAW_RW=false
  ;;
  '--prefix')
   PREFIX="$2"
   shift;
  ;;
  '--prefix-bin')
   PREFIX_BIN="$2"
   shift;
  ;;
  '--prefix-lib')
   PREFIX_LIB="$2"
   shift;
  ;;
  '--prefix-inc')
   PREFIX_INC="$2"
   shift;
  ;;
  '--prefix-man')
   PREFIX_MAN="$2"
   shift;
  ;;
  '--exec-helper')
   EXEC_HELPER="$2"
   shift;
  ;;
  '--target-win32')
   RUNTIME_DETECT=true
   no_lib_dnet=true
   TARGET_WIN32=true
   PROXY=false
   XMMS=false
  ;;
 esac;

 shift;
done


CCTF="false"

test_lib () {
 echo > $TF_C

 echo -n "checking for $1... "
 shift;

 LIBS=''

 while [ "$1" != '--' ]
 do
  LIBS="$LIBS -l$1"
  shift;
 done

 shift;

 LIBS=$(echo "$LIBS" | sed 's/-l-l/-l/g; s/-l-L/-L/g;')

 while [ "$1" != '' ]
 do
  echo "#include <$1>" >> $TF_C
  shift;
 done

 echo 'int main (void) { return 0; }' >> $TF_C

 $CCTF $LIBS 2> /dev/null;

 R=$?

 if [ "$R" = '0' ]
 then
  echo 'yes'
 else
  echo 'no'
 fi

 return $R
}

test_lib_defmake () {
 def="$1"
 subdir="$2"
 shift
 shift
 name="$1"
 lib="$2"
 shift

 [ "$subdir" = '%' ] && subdir=''

 if [ "$lib" != '--' ]
 then
  eval _no="\$no_lib_$lib";
  $MINIMAL && _no='XXX'

  if [ "$_no" != '' ]
  then
    echo "checking for $1... disabled by user"
   [ "$subdir" != '' ] && \
    echo "subdir_$subdir=" >&4
   echo "lib_$lib=" >&4
   return;
  fi
 fi

 LIBS=$($PKG_CONFIG --silence-errors --libs $lib)
 if [ "$?" != '0' ]
 then
  LIBS="-l$lib"
 fi

 if test_lib "$name" $LIBS "$@"
 then
  subdir_var='subdir_'"`echo $subdir | tr / _`"
  echo "#define $def"            >&3
  [ "$subdir" != '' ] && \
   echo "$subdir_var=$subdir" >&4
  echo "lib_$lib=$LIBS" >&4
 else
  [ "$subdir" != '' ] && \
   echo "subdir_$subdir=" >&4
  echo "lib_$lib=" >&4
 fi
}

test_tool_defmake () {
 DEF="$1"
 NAME="$2"
 shift;
 shift;
 echo -n "checking for $NAME... "

 if $RUNTIME_DETECT
 then
  echo "$1 (runtime detect)"
 echo "#define $DEF "\""$1"\" >&3
 elif $MINIMAL
 then
  echo "disabled by user (minimalstic build)"
 else

  LIST=$(which "$@" 2> /dev/null | grep ^/ | head -n 1)

  if [ "$LIST" = '' ]
  then
   echo 'no'
  else
   echo $LIST
   echo "#define $DEF "\""$LIST"\" >&3
  fi
 fi
}

exec 3> config.h 4> Makefile.conf

if [ "$SYSNAME" = 'Darwin' ]
then
 echo "Adding $SYSNAME shared lib arguments..."
 SHARED="$SHARED -fno-common -dynamiclib -compatibility_version 0.1 -current_version 0.1.0"
 SHARED_CF="$SHARED_CF -fno-common"
elif [ "$SYSNAME" = 'NetBSD' ]
then
 echo "Adding $SYSNAME libpath arguments..."
 LDPATH="$LDPATH -L/usr/local/lib/"
elif [ "$SYSNAME" = 'OpenBSD' ]
then
 echo "Adding $SYSNAME search path arguments..."
 LDPATH="$LDPATH -L/usr/local/lib/"
 INCPATH="$INCPATH -I/usr/local/include/"
elif [ "$SYSNAME" = 'FreeBSD' ]
then
 echo "Adding $SYSNAME search path arguments..."
 LDPATH="$LDPATH -L/usr/local/lib/"
 INCPATH="$INCPATH -I/usr/local/include/"
 [ "$DEFAULT_GRP" = '' ] && DEFAULT_GRP='wheel'
fi

[ "$PREFIX_BIN" = '' ] && PREFIX_BIN="$PREFIX/bin/"
[ "$PREFIX_LIB" = '' ] && PREFIX_LIB="$PREFIX/lib/"
[ "$PREFIX_INC" = '' ] && PREFIX_INC="$PREFIX/include/"
[ "$PREFIX_MAN" = '' ] && PREFIX_MAN="$PREFIX/share/man/"

[ "$DEFAULT_GRP" = '' ] && DEFAULT_GRP='audio'

# now write the cc name to Makefile.conf
{
 echo "SHARED=$SHARED"
 echo "SHARED_CF=$SHARED_CF"
 echo "CC=$CC"
 echo "LDPATH=$LDPATH"
 echo "INCPATH=$INCPATH"
 echo "PREFIX=$PREFIX"
 echo "PREFIX_BIN=$PREFIX_BIN"
 echo "PREFIX_LIB=$PREFIX_LIB"
 echo "PREFIX_INC=$PREFIX_INC"
 echo "PREFIX_MAN=$PREFIX_MAN"
} >&4

CCTF="$CC $LDPATH $INCPATH -Iinclude/ -o $TF_E $TF_C"

cat >&3 << EOF
//config.h:

#ifndef _ROARAUDIO_CONFIG_H_
#define _ROARAUDIO_CONFIG_H_

EOF

{
 echo '/* uname: ' $(uname -a) '*/'
 echo '/* Date : ' $(date)  '*/'
 echo
 [ "$DEFAULT_RATE"     = '' ] || echo "#define ROAR_RATE_DEFAULT     $DEFAULT_RATE"
 [ "$DEFAULT_CHANNELS" = '' ] || echo "#define ROAR_CHANNELS_DEFAULT $DEFAULT_CHANNELS"
 [ "$DEFAULT_BITS"     = '' ] || echo "#define ROAR_BITS_DEFAULT     $DEFAULT_BITS"
 echo
 $ALAW     && echo '#define ROAR_SUPPORT_ALAW'
 $ALAW_RW  && echo '#define ROAR_SUPPORT_ALAW_RW'
 $MULAW    && echo '#define ROAR_SUPPORT_MULAW'
 $MULAW_RW && echo '#define ROAR_SUPPORT_MULAW_RW'
 $PROXY    && echo '#define ROAR_SUPPORT_PROXY'
 echo
 $TARGET_WIN32 && echo '#define ROAR_TARGET_WIN32'
 echo
} >&3

#                 #define                  name         cmds...
test_tool_defmake ROAR_HAVE_BIN_OGG123     ogg123       ogg123
test_tool_defmake ROAR_HAVE_BIN_FLAC       flac         flac
test_tool_defmake ROAR_HAVE_BIN_TIMIDITY   TiMidity++   timidity
test_tool_defmake ROAR_HAVE_BIN_CDPARANOIA cdparanoia   cdparanoia
test_tool_defmake ROAR_HAVE_BIN_WGET       Wget         wget
test_tool_defmake ROAR_HAVE_BIN_GNUPLOT    gnuplot      gnuplot
test_tool_defmake ROAR_HAVE_BIN_SSH        OpenSSH      ssh

echo >&3

#                #define                 subdir       name           -lxxx      -- header
test_lib_defmake ROAR_HAVE_LIBM          %            'Math Library' m          -- math.h
if test_lib 'realtime Library' rt -- sys/mman.h mqueue.h semaphore.h
then
 {
  echo '#define ROAR_HAVE_LIBRT'
  echo '#define ROAR_NEED_LIBRT'
 } >&3
fi

echo >&3

#                #define                 subdir       name          -lxxx      -- header
test_lib_defmake ROAR_HAVE_ESD           libroaresd   EsounD        esd        -- esd.h
test_lib_defmake ROAR_HAVE_LIBAO         plugins/ao   libao         ao         -- ao/ao.h ao/plugin.h
test_lib_defmake ROAR_HAVE_LIBVORBIS     %            libvorbis     vorbis     -- vorbis/codec.h
test_lib_defmake ROAR_HAVE_LIBVORBISFILE %            libvorbisfile vorbisfile -- vorbis/vorbisfile.h
test_lib_defmake ROAR_HAVE_LIBVORBISENC  %            libvorbisenc  vorbisenc  -- vorbis/vorbisenc.h
test_lib_defmake ROAR_HAVE_LIBSPEEX      %            libspeex      speex      -- speex/speex.h speex/speex_stereo.h
test_lib_defmake ROAR_HAVE_LIBSPEEXDSP   %            libspeexdsp   speexdsp   -- speex/speex.h speex/speex_stereo.h
test_lib_defmake ROAR_HAVE_LIBCELT       %            libcelt       celt       -- celt/celt.h celt/celt_header.h
test_lib_defmake ROAR_HAVE_LIBOGGZ       %            liboggz       oggz       -- oggz/oggz.h
test_lib_defmake ROAR_HAVE_LIBSNDFILE    %            libsndfile    sndfile    -- sndfile.h
test_lib_defmake ROAR_HAVE_LIBFISHSOUND  roarfish     libfishsound  fishsound  -- fishsound/fishsound.h
test_lib_defmake ROAR_HAVE_LIBSHOUT      %            libshout      shout      -- shout/shout.h
test_lib_defmake ROAR_HAVE_LIBPULSE      libroarpulse libpulse      pulse      -- pulse/pulseaudio.h pulse/simple.h
test_lib_defmake ROAR_HAVE_LIBY2         libroaryiff  libyiff       Y2         -- Y2/Y.h Y2/Ylib.h
test_lib_defmake ROAR_HAVE_LIBARTSC      libroararts  libartsc      artsc      -- kde/artsc/artsc.h
test_lib_defmake ROAR_HAVE_LIBOSSAUDIO   %            libossaudio   ossaudio   -- sys/ioctl.h
test_lib_defmake ROAR_HAVE_LIBDNET       %            libdnet       dnet       -- sys/socket.h netdnet/dn.h netdnet/dnetdb.h
test_lib_defmake ROAR_HAVE_UNIX          %            UNIX          c          -- sys/types.h sys/socket.h sys/un.h
test_lib_defmake ROAR_HAVE_IPX           %            IPX           c          -- netipx/ipx.h
test_lib_defmake ROAR_HAVE_OSS           %            OSS           c          -- sys/ioctl.h sys/soundcard.h
test_lib_defmake ROAR_HAVE_OSS_BSD       %            BSDOSS        c          -- sys/ioctl.h soundcard.h
test_lib_defmake ROAR_HAVE_LIBWSOCK32    %            WinSockP0     wsock32    -- winsock2.h
test_lib_defmake ROAR_HAVE_LIBWS2_32     %            WinSockP1     ws2_32     -- winsock2.h

# add a better test here
test_lib 'linux sendfile()'       -- sys/sendfile.h && echo '#define ROAR_HAVE_LINUX_SENDFILE' >&3


echo -n 'checking for IPv6... '

echo '#include <sys/socket.h>'  > $TF_C
echo '#include <netinet/in.h>' >> $TF_C
echo 'int main (void) { struct sockaddr_in6 in6; return 0; }' >> $TF_C

if $CCTF 2> /dev/null;
then
 echo '#define ROAR_HAVE_IPV6' >&3
 echo yes
else
 echo no
fi


echo -n 'checking for mlock()... '

echo '#include <sys/mman.h>' > $TF_C
echo 'int main (void) { mlock((void*)0, 0); return 0; }' >> $TF_C

if $CCTF 2> /dev/null;
then
 echo '#define ROAR_HAVE_MLOCK' >&3
 echo yes
else
 echo no
fi

echo -n 'checking for fdatasync()... '

echo '#include <unistd.h>' > $TF_C
echo 'int main (void) { fdatasync(0); return 0; }' >> $TF_C

if $CCTF 2> /dev/null;
then
 echo '#define ROAR_HAVE_FDATASYNC' >&3
 echo '#define ROAR_FDATASYNC fdatasync' >&3
 echo yes
else
 echo '#define ROAR_FDATASYNC fsync' >&3
 echo no
fi

echo -n 'checking for square root func... '

echo "$SYSNAME" | if grep CYGWIN > /dev/null
then
 echo 'sqrt() (cygwin)'
else
 echo '#include <math.h>' > $TF_C
 echo 'int main (void) { sqrtl(0); return 0; }' >> $TF_C

 if $CCTF -lm 2> /dev/null;
 then
  echo '#define ROAR_HAVE_SQRTL' >&3
  echo 'sqrtl()'
 else
  echo 'sqrt()'
 fi
fi

echo -n 'checking for inline funcs... '

echo 'inline int test (void) { return 0; }' > $TF_C
echo 'int main (void) { return test(); }'  >> $TF_C

if $CCTF 2> /dev/null;
then
 echo '#define ROAR_HAVE_INLINE' >&3
 echo yes
else
 echo no
fi

echo -n 'checking for broken peercred... '
echo '#include <roaraudio.h>' > $TF_C
echo 'int main (void) { struct ucred cred; return 0; }'  >> $TF_C

if $CCTF 2> /dev/null;
then
 echo working
else
 echo '#define ROAR_BROKEN_PEERCRED' >&3
 echo broken
fi

echo -n 'checking for safe 32 bit integer overflow... '

cat > $TF_C << EOF
#include <stdio.h>
#include <stdint.h>
#define TYPE uint32_t
#define MAX  ((TYPE)4294967295U)

int main (void) {
 TYPE a = MAX;

 a += 2;

 if ( a == 1 ) {
  printf("#define ROAR_HAVE_SAFE_OVERFLOW\n");
  return 0;
 }

 return 1;
}
EOF

if $CCTF 2> /dev/null;
then
 $EXEC_HELPER $TF_E >&3
 if [ "$?" = '0' ]
 then
  echo yes
 else
  echo no
 fi
else
 echo 'no (can not compile!, no stdint.h?)'
fi

echo -n 'checking for __LP64__... '
cat > $TF_C << EOF
#include <stdio.h>

int main (void) {
#ifdef __LP64__
 fprintf(stderr, "set by compiler\n");
#else
 if ( sizeof(int) == sizeof(void*) ) {
  fprintf(stderr, "no need to set\n");
 } else {
  fprintf(stderr, "need to set\n");
  printf("\n#ifndef __LP64__\n#define __LP64__\n#endif\n\n");
 }
#endif
 return 0;
}
EOF
if $CCTF 2> /dev/null;
then
 $EXEC_HELPER $TF_E >&3
else
 echo 'error, can not compile'
 exit 1
fi

echo -n 'checking for 64 bit types... '
cat > $TF_C << EOF
#include <stdio.h>
#include <stdint.h>

int main (void) {
 char * i64 = NULL, * ui64 = NULL;

 if ( sizeof(int) == 8 ) {
  i64 = "int"; ui64 = "unsigned int";
 } else if ( sizeof(long int) == 8 ) {
  i64 = "long int"; ui64 = "unsigned long int";
 } else if ( sizeof(long long int) == 8 ) {
  i64 = "long long int"; ui64 = "unsigned long long int";
 } else if ( sizeof(int64_t) == 8 ) {
  i64 = "int64_t"; ui64 = "uint64_t";
 } else {
  fprintf(stderr, "none\n");
  return 0;
 }

 fprintf(stderr, "%s, %s\n", i64, ui64);
 printf("#define ROAR_NATIVE_INT64 %s\n#define ROAR_NATIVE_UINT64 %s\n", i64, ui64);

 return 0;
}
EOF
if $CCTF 2> /dev/null;
then
 $EXEC_HELPER $TF_E >&3
else
 echo 'error, can not compile'
 exit 1
fi


echo -n 'checking if cp supports -v... '
if cp -v --help > /dev/null 2> /dev/null
then
 echo "cp_v=-v" >&4
 echo yes
else
 echo "cp_v=" >&4
 echo no
fi

echo -n 'checking for cdrom device... '
if [ -e "$CDROM" ]
then
 echo "$CDROM"
 echo '#define ROAR_DEFAULT_CDROM "'"$CDROM"'"' >&3
else
 CDROM=$(ls /dev/cdrom /dev/rcd0c 2> /dev/null | head -n 1);
 if [ -e "$CDROM" ]
 then
  echo "$CDROM"
  echo '#define ROAR_DEFAULT_CDROM "'"$CDROM"'"' >&3
 else
  echo 'none'
 fi
fi

echo -n 'checking for OSS device... '
if [ -e "$OSS_DEV" ]
then
 echo "$OSS_DEV"
 echo '#define ROAR_DEFAULT_OSS_DEV "'"$OSS_DEV"'"' >&3
else
 OSS_DEV=$(ls /dev/dsp /dev/audio 2> /dev/null | head -n 1);
 if [ -e "$OSS_DEV" ]
 then
  echo "$OSS_DEV"
  echo '#define ROAR_DEFAULT_OSS_DEV "'"$OSS_DEV"'"' >&3
 else
  echo 'none'
 fi
fi

echo 'checking for decnet status file... '"$PROC_NET_DECNET"
echo '#define ROAR_PROC_NET_DECNET "'"$PROC_NET_DECNET"'"' >&3


echo 'checking for default audio group... '"$DEFAULT_GRP"
echo '#define ROAR_DEFAULT_SOCKGRP "'"$DEFAULT_GRP"'"' >&3

cat >&3 << EOF

#endif

//ll
EOF

cd plugins

if $LIBAO
then
 echo 'running libao plugin configure...'
  cd ao/
 if [ "$AO_INST_DIR" = '' ]
 then
  ./configure --force-have-roar
 else
  ./configure --force-have-roar --inst-dir "$AO_INST_DIR"
 fi
 cd ..
else
 echo "running libao plugin configure... disabled by user"
fi

if $XMMS
then
 echo 'running xmms plugin configure...'
  cd xmms/
 if [ "$XMMS_INST_DIR" = '' ]
 then
  ./configure --force-have-roar
 else
  ./configure --force-have-roar --inst-dir "$XMMS_INST_DIR"
 fi
 cd ..
else
 echo "running xmms plugin configure... disabled by user"
fi

cd ..

rm -f $TF_C $TF_E

mv config.h include/roaraudio/
echo 'config.h created and moved into include/roaraudio/'

echo "$SYSNAME" | if grep CYGWIN > /dev/null
then
 rm -f $TF_E.exe
 echo 'patching Makefiles for cygwin...'
 find . -name Makefile -print0 | xargs -0 sed 's/\.so/.dll'/g -i
fi

#ll
